// Duschen (Police Molest)

/****************************
*   Raum-Funktionen
****************************/
function room_Load()
{
	String seperator = String.Format("\\ **** Duschen");
	Door[eDoorNumDuschen].Init(oTuer, hTuer);
}


/****************************
*   Tür-Hotspot-Funktionen
****************************/
function hTuer_AnyClick()
{
	if ( Door[eDoorNumDuschen].Click() == 0 ) Unhandled();
}


/****************************
*   Objekt-Funktionen
****************************/



/****************************
*   Hotspot-Funktionen
****************************/
int Hahnen(int l_XPos, int l_YPos, eDirection l_DirTurn)
{
	if (any_click_move(l_XPos, l_YPos, eDirUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Ein Hahn.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ohne Werkzeug?");
		}
		else if (UsedAction(eActUse) || UsedAction(eActOpen) || UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Ich kann doch unmöglich mit Klamotten duschen!");
			Wait(20);
			player.FaceDirection(l_DirTurn);
			Wait(5);
			player.FaceDirection(eDirDown);
			Wait(10);
			player.Say("Mal im Ernst: Wenn das jetzt ein Sierra-Spiel wäre, ...");
			player.Say("dann gäbe es für diese Aktion Punktverlust!");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ja, der sitzt fest. Der dreht sich nur.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("%s verträgt sich nicht mit dem Hahnen.", player.ActiveInventory.Name);
		}
		else Unhandled();
	}
}

function hHahn1_AnyClick()
{
	return Hahnen(128, 113, eDirRight);
}

function hHahn2_AnyClick()
{
	return Hahnen(198, 113, eDirLeft);
}

function hKlappe_AnyClick()
{
	if (any_click_move(26, 136, eDirLeft))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Da kommt immer die Schmutzwäsche rein.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Ich werde sie öffnen, wenn ich etwas reintun möchte.");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Sie ist schon geschlossen.");
		}
		else if (UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das sollte nicht den Schacht runter.");
		}
		else Unhandled();
	}
}

function hGitter_AnyClick()
{
	if (any_click_move(253, 121, eDirUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Ein Lüftungsgitter.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Das ist doch schon geschlossen.");
		}
		else if (UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Nö.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das würde das Gitter nur verstopfen.");
		}
		else Unhandled();
	}
}

int Schrank(int l_XPos, int lYPos, eDirection l_Dir)
{
	if (any_click_move(l_XPos, lYPos, l_Dir))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Zum Verstauen von Kleidung und persönlichen Gegenständen optimal.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Gehts noch? Der ist doch viel zu schwer.");
		}
		else if (UsedAction(eActUse) || UsedAction(eActOpen))
		{
			Wait(5);
			PlaySound(46);
			Wait(30);
			PlaySound(46);
			Wait(40);  
			player.Say("Allesamt abgeschlossen.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Es scheinen alle Schränke bereits geschlossen zu sein.");
		}
		else if (UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Kaltes Metall.");
		}
		else if (UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Das fehlt der Griff.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Damit bekomme ich die Schlösser nicht auf.");
		}
		else Unhandled();
	}
}

function hSchrankL_AnyClick()
{
	return Schrank(114, 136, eDirLeft);
}

function hSchrankML_AnyClick()
{
	return Schrank(117, 136, eDirRight);
}

function hSchrankMR_AnyClick()
{
	return Schrank(195, 136, eDirLeft);
}

function hSchrankR_AnyClick()
{
	return Schrank(200, 136, eDirRight);
}


int Abfluss(int l_XPos, int l_YPos, eDirection l_Dir, int l_Which)
{
	int l_Random;
	l_Random = Random(1);
	//l_Random = l_Which;	// falls die Texte auf den Abflüssen getrennt erfolgen.
	
	if (any_click_move(l_XPos, l_YPos, l_Dir))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			if ( l_Random == 1 )
			{
				player.Say("Wie viele Liter Wasser da wohl täglich durchfließen?");
			}
			else
			{
				player.Say("Dadurch gelangt alles schnurstracks in die Kanalisation.");
				Wait(10);
				player.Say("Natürlich nur, sofern es flüssig ist oder durch die Gitter passt.");
			}
		}
		else if (UsedAction(eActPickUp) || UsedAction(eActUse) || UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			if ( l_Random == 1 )
			{
				player.Say("Er bewegt sich nicht ...");
			}
			else
			{
				player.Say("Ich glaube, er ist im Boden verankert ...");
				player.Say("Oder ich verstehe den Mechanismus einfach nicht.");
			}
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			if ( l_Random == 1 )
			{
				player.Say("Im geschlossenen Zustand geht das nicht.");
			}
			else
			{
				player.Say("Im geschlossenen Zustand geht das nicht.");
			}
		}
		else if (UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Der bewegt sich nicht.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			if ( l_Random == 1 )
			{
				player.Say("Das ist in meiner Tasche besser aufgehoben, ...");
				player.Say("als in den Abwässern Ronvilles.");
			}
			else
			{
				player.Say("Der Gegenstand wäre nutzlos, wenn er in den Abwässern Ronvilles schwämme.");
			}
		}
		else Unhandled();
	}
}

function hAbflussL_AnyClick()
{
	return Abfluss(43, 133, eDirDown, 0);
}

function hAbflussM_AnyClick()
{
	return Abfluss(259, 131, eDirUp, 1);
}


/****************************
*   Regionen-Funktionen
****************************/
