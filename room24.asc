// zweiter Keller (Police Molest)

/****************************
*   Raum-Funktionen
****************************/
function room_Load()
{
	String seperator = String.Format("\\ **** zweiter Keller");
	Door[eDoorNumWaeschekammer].Init(oTuerWaesche, hTuerWaesche);
	Door[eDoorNumPathologie].Init(oTuerPathologie, hTuerPathologie);
	//Door[eDoorNumParkplatz].Init(oTuerParkhaus, hTuerParkhaus);
	oFahrstuhltuer.Clickable = false;
	
	if ( player.PreviousRoom == 15 ) // Spieler kommt aus dem Fahrstuhl
	{
		player.x	= -40;
		player.y	= 133;
	}
}

function room_AfterFadeIn()
{
	if ( player.PreviousRoom == 15 ) // Spieler kommt aus dem Fahrstuhl
	{
		StartCutscene(eSkipESCOrRightButton);
			PlaySound(90);
			oFahrstuhltuer.SetView(56, 1);
			oFahrstuhltuer.Animate(1, 2, eOnce, eBlock, eForwards);
			Wait(50);

			player.Walk(60, 133, eBlock, eAnywhere);
			Wait(20);

			oFahrstuhltuer.Animate(3, 2, eOnce, eBlock, eForwards);
			Wait(40);
		EndCutscene();
		
		gMaingui.Visible	= true;
		gAction.Visible		= true;
		Mouse.Visible			= true;
	}
}


/****************************
*   Tür-Hotspot-Funktionen
****************************/
function hTuerWaesche_AnyClick()
{
	if ( Door[eDoorNumWaeschekammer].Click() == 0 ) Unhandled();
}

function hTuerPathologie_AnyClick()
{
	if ( Door[eDoorNumPathologie].Click() == 0 ) Unhandled();
}

function hTuerParkhaus_AnyClick()
{
//	if ( Door[eDoorNumParkplatz].Click() == 0 ) Unhandled();
	if (any_click_move(290, 111, eDirRight))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Sie unterscheidet sich kaum von den anderen beiden Türen.");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Da will ich jetzt nicht rein.");
		}
		else Unhandled();
	}
}


/****************************
*   Objekt-Funktionen
****************************/



/****************************
*   Hotspot-Funktionen
****************************/
function hKnopf_AnyClick()
{
	if ( UsedAction(eActWalkTo) )
	{
		if ( any_click_move(60, 123, eDirUp) )
		{
		}
	}
	else if ( UsedAction(eActPush) || UsedAction(eActUse) )
	{
		if ( any_click_move(60, 123, eDirUp) )
		{
			Wait(20);
			gMaingui.Visible = false;
			gAction.Visible = false;
			StartCutscene(eSkipESCOrRightButton);
				PlaySound(83);
				Wait(20);
				PlayAmbientSound(1, 170, 100, 0, 0);

				while ( gi_Stockwerk < -2 )
				{
					gi_Stockwerk++;
					Wait(40);
				}

				StopAmbientSound(1);
				PlaySound(90);
				oFahrstuhltuer.SetView(56, 1, 0);
				oFahrstuhltuer.Animate(1, 0, eOnce, eBlock, eForwards); // Fahrstuhltür auf
				Wait(20);
			
				player.Walk(43, 133, eBlock, eAnywhere);
				player.FaceDirection(eDirLeft);
				Wait(40);
				player.Walk(-40, 133, eBlock, eAnywhere);
				oFahrstuhltuer.Animate(1, 0, eOnce, eBlock, eBackwards); // Fahrstuhltür zu
				Wait(40);
			EndCutscene();
			player.ChangeRoom(15); // Spieler in den Fahrstuhl schicken
		}
	}
	else
	{
		player.FaceDirection(eDirLeft);
		Unhandled();
	}
}

int Schild(int l_XPos, int l_YPos, eDirection l_Dir, String s_Message)
{
	if (any_click_move(l_XPos, l_YPos, l_Dir))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt) || UsedAction(eActUse))
		{
			Wait(5);
			player.Say(s_Message);
		}
		else if (UsedAction(eActPickUp) || UsedAction(eActOpen) || UsedAction(eActClose)
					|| UsedAction(eActPull) || UsedAction(eActPush) || UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das Schild verweigert die Zusammenarbeit.");
		}
		else Unhandled();
	}
}

function hSchildWaesche_AnyClick()
{
	return Schild(133, 119, eDirUp, "Hier steht: \"Wäschekammer\".");
}

function hSchildPathologie_AnyClick()
{
	return Schild(187, 129, eDirRight, "Hier steht: \"Pathologie\".");
}

function hSchildParkhaus_AnyClick()
{
	return Schild(281, 113, eDirUp, "Hier steht: \"Garage\"");
}

function hFahrstuhl_AnyClick()
{
	if (any_click_move(44, 126, eDirLeft))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Diese Fahrstuhltüren sehen in jedem Stockwerk fast identisch aus ...");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("");
		}
		else if (UsedAction(eActUse) || UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Dazu muss ich das Panel benutzen.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Die Tür ist schon zu.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Das funktioniert nicht.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Nicht damit.");
		}
		else Unhandled();
	}
}

/****************************
*   Regionen-Funktionen
****************************/
