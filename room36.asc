// Küche (Police Molest)

/****************************
*   Raum-Funktionen
****************************/
function room_Load()
{
  aMusic59.Play();
	String seperator = String.Format("\\ **** Küche");
}

/****************************
*   Tür-Hotspot-Funktionen
****************************/



/****************************
*   Objekt-Funktionen
****************************/



/****************************
*   Hotspot-Funktionen
****************************/
function hDurchgang_AnyClick()
{
	any_click_move(73, 128, eDirectionLeft);
}

function hKasten_AnyClick()
{
	/* Feuerwehrschlauch */
	if (any_click_move(107, 140, eDirectionLeft))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("\"Der Robert-Miller- Gedenk-Feuerwehrschlauch\"");
		}
		else if (UsedAction(eActPickUp) || UsedAction(eActUse) || UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Ich sehe weit und breit kein Feuer.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Er ist schon zu.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Nein.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das ist kein Feuerwehrschlauch.");
		}
		else Unhandled();
	}

}

function hKaffeeautomat_AnyClick()
{
	if (any_click_move(125, 128, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("\"COOPERS COFFEE\"");
			player.Say("\"Verdammt guter Kaffee!\"");
			Wait(7);
			player.FaceDirection(eDirectionDown);
			Wait(7);
			player.Say("Na, hoffen wir es mal ...");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Dann haben die anderen keinen Kaffee.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Ich muss vorher Geld einwerfen.");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Den Automaten beschädigen?");
			player.Say("Was würde Agent Cooper dazu sagen?");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Da gibt es nichts zu schließen.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das scheint kein Geld zu sein.");
		}
		else Unhandled();
	}

}

function hFenster_AnyClick()
{
	if (any_click_move(194, 131, eDirectionRight))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Ein ganz normales Fenster.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Das geht mit Fenster nicht.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Draußen zieht gerade eine schwefelwolke heran.");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Die Luft ist hier nicht schlechter als draußen.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Das ist schon geschlossen.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Du weißt schon, was du tust?");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das will ich nicht das Fenster rauswerfen.");
		}
		else Unhandled();
	}

}

function hMotto_AnyClick()
{
	if (any_click_move(116, 139, eDirectionLeft))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Könnte von Hoagie stammen ...");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Das hängt mir zu hoch.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Benutzen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Das Poster verweigert die Zusammenarbeit.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Das Poster hängt zu hoch.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Wieso sollte ich das an das Poster werfen?");
		}
		else Unhandled();
	}

}

int Schrank(int l_XPos, int l_YPos, Object *o_Object, String s_Message)
{
	if (any_click_move(l_XPos, l_YPos, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Keine Besonderheiten erkennbar.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Der ist festgemacht.");
		}
		else if (UsedAction(eActUse) || UsedAction(eActOpen) || UsedAction(eActPull))
		{
			Wait(5);
			PlaySound(1);
      o_Object.Visible = true;
      Wait(40);
      player.Say(s_Message);
      Wait(20);
      PlaySound(5);
      o_Object.Visible = false;
		}
		else if (UsedAction(eActClose) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Weiter kann man die nicht schließen.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das will ich nicht in den Schrank legen.");
		}
		else Unhandled();
	}

}

function hSchranktuer01_AnyClick()
{
	return Schrank(190, 126, oSchranktuer01, "Hier sind Tassen drin.");
}

function hSchranktuer02_AnyClick()
{
	return Schrank(190, 126, oSchranktuer02, "Teller über Teller.");
}

function hWaschbecken_AnyClick()
{
	if (any_click_move(207, 142, eDirectionRight))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Sieht sauber aus.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Das ist festgemacht.");
		}
		else if (UsedAction(eActUse) || UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Meine Hände sind bereits sauber genug.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Dafür gibt es keinen Deckel.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Das Waschbecken lässt sich nicht verschieben.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das braucht nicht gewaschen zu werden.");
		}
		else Unhandled();
	}

}

function hHerdplatte_AnyClick()
{
	if (any_click_move(200, 135, eDirectionRight))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Eine Herdplatte.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Das geht nicht.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Wen sollte ich bekochen?");
		}
		else if (UsedAction(eActOpen) || UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Das geht nicht mit einer Herdplatte.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Die Platte bewegt sich nicht.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Es fehlt mir der Topf.");
		}
		else Unhandled();
	}

}

function hKuehlschrank_AnyClick()
{
	if (any_click_move(200, 135, eDirectionRight))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Erinnert mich an diese Minibars in Hotels.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("");
		}
		else if (UsedAction(eActUse) || UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Ich bezweifle, dass da drinnen etwas Interessantes zu finden ist.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Der Kühlschrank ist doch zu.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Ich will den Kühlschrank nicht verrücken.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das will ich nicht in den Kühlschrank legen.");
		}
		else Unhandled();
	}

}

function hMikrowelle_AnyClick()
{
	if (any_click_move(189, 128, eDirectionUp))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Das ist eine Mikrowelle.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Ich klaue doch nicht anderer Leute Mikrowellen.");
		}
		else if (UsedAction(eActUse) || UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Ich will nichts erwärmen.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Ihre Tür ist bereits geschlossen.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Die will ich nicht verrücken.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das will ich nicht erwärmen. Geht das überhaupt?");
		}
		else Unhandled();
	}
}

function hSchildFeuer_AnyClick()
{
	if (any_click_move(109,131, eDirectionLeft))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Ein Schild, dass auf den Feuerwehrschlauch hinweist.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Das Teil ist sicherheitstechnisch Relevant.");
		}
		else if (UsedAction(eActUse) || UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Nein, nein.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Das geht nicht.");
		}
		else if (UsedAction(eActPull) || UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Das geht nicht.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das bringt nichts.");
		}
		else Unhandled();
	}
}

function hUntereSchraenke_AnyClick()
{
	if (any_click_move(189, 132, eDirectionRight))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Ein Schränkchen.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Tja. Das wird schwer.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Die Tür klemmt.");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Die Tür klemmt.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Das ist schon zu.");
		}
		else if (UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Die Tür klemmt.");
		}
		else if (UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Die Tür klemmt.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das geht nicht.");
		}
		else Unhandled();
	}
}

function hSchublade_AnyClick()
{
	if (any_click_move(189, 132, eDirectionRight))
	{
		if (UsedAction(eActWalkTo))
		{
		}
		else if (UsedAction(eActLookAt))
		{
			Wait(5);
			player.Say("Eine Schublade.");
		}
		else if (UsedAction(eActPickUp))
		{
			Wait(5);
			player.Say("Die brauche ich nicht.");
		}
		else if (UsedAction(eActUse))
		{
			Wait(5);
			player.Say("Und wie?");
		}
		else if (UsedAction(eActOpen))
		{
			Wait(5);
			player.Say("Die Schublade klemmt.");
		}
		else if (UsedAction(eActClose))
		{
			Wait(5);
			player.Say("Die ist schon zu.");
		}
		else if (UsedAction(eActPull))
		{
			Wait(5);
			player.Say("Die Schublade klemmt.");
		}
		else if (UsedAction(eActPush))
		{
			Wait(5);
			player.Say("Die ist schon zu.");
		}
		else if (UsedAction(eActUseInventory))
		{
			Wait(5);
			player.Say("Das will ich nicht da rein legen.");
		}
		else Unhandled();
	}
}

/****************************
*   Regionen-Funktionen
****************************/
function region1_WalksOnto()
{
	player.ChangeRoom(35, 311, 127, eDirectionLeft);
}
